# Generated by Django 5.2.5 on 2025-08-29 15:44

import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cases', '0001_initial'),
        ('donations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RecommendationModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('model_type', models.CharField(choices=[('content_based', 'Content-Based Filtering'), ('collaborative', 'Collaborative Filtering'), ('kmeans', 'K-Means Clustering'), ('decision_tree', 'Decision Tree'), ('naive_bayes', 'Naive Bayes')], max_length=20)),
                ('version', models.CharField(default='1.0', max_length=10)),
                ('model_data', models.BinaryField()),
                ('parameters', models.JSONField(default=dict)),
                ('features', models.JSONField(default=list)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('training_date', models.DateTimeField(auto_now_add=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'recommendation_models',
            },
        ),
        migrations.CreateModel(
            name='SearchQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=500)),
                ('category_filter', models.CharField(blank=True, max_length=20, null=True)),
                ('location_filter', models.CharField(blank=True, max_length=100, null=True)),
                ('results_count', models.PositiveIntegerField(default=0)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'search_queries',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_range', models.CharField(blank=True, choices=[('18-25', '18-25'), ('26-35', '26-35'), ('36-45', '36-45'), ('46-55', '46-55'), ('55+', '55+')], max_length=10, null=True)),
                ('income_range', models.CharField(blank=True, choices=[('low', 'Low (< 50K)'), ('medium', 'Medium (50K-200K)'), ('high', 'High (200K+)')], max_length=20, null=True)),
                ('preferred_categories', models.JSONField(blank=True, default=list)),
                ('donation_frequency', models.CharField(blank=True, choices=[('one_time', 'One Time'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], max_length=20, null=True)),
                ('avg_donation_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('total_donations', models.PositiveIntegerField(default=0)),
                ('total_donated', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('donation_pattern_vector', models.JSONField(blank=True, default=list)),
                ('cluster_id', models.IntegerField(blank=True, null=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('last_donation', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='CaseFeatures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_vector', models.JSONField(default=list)),
                ('description_vector', models.JSONField(default=list)),
                ('urgency_score', models.FloatField(default=0.0)),
                ('completion_ratio', models.FloatField(default=0.0)),
                ('donor_count', models.PositiveIntegerField(default=0)),
                ('avg_donation', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('days_active', models.PositiveIntegerField(default=0)),
                ('category_features', models.JSONField(default=dict)),
                ('location_vector', models.JSONField(default=list)),
                ('share_count', models.PositiveIntegerField(default=0)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('case', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='cases.charitycase')),
            ],
            options={
                'db_table': 'case_features',
            },
        ),
        migrations.CreateModel(
            name='RecommendationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('like', 'Like'), ('dislike', 'Dislike'), ('not_interested', 'Not Interested'), ('irrelevant', 'Irrelevant')], max_length=20)),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cases.charitycase')),
                ('recommendation_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='donations.recommendationhistory')),
            ],
            options={
                'db_table': 'recommendation_feedback',
            },
        ),
    ]
