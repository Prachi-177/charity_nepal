# Generated by Django 5.2.5 on 2025-08-30 02:48

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cases', '0002_initial'),
        ('recommendations', '0003_recommendationhistory_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AlgorithmPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algorithm_name', models.CharField(max_length=20)),
                ('date', models.DateField()),
                ('total_recommendations', models.IntegerField(default=0)),
                ('clicked_recommendations', models.IntegerField(default=0)),
                ('donated_recommendations', models.IntegerField(default=0)),
                ('click_through_rate', models.FloatField(default=0.0)),
                ('conversion_rate', models.FloatField(default=0.0)),
                ('avg_confidence_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'algorithm_performance',
                'indexes': [models.Index(fields=['algorithm_name', 'date'], name='algorithm_p_algorit_dd08d2_idx'), models.Index(fields=['date'], name='algorithm_p_date_3fff20_idx')],
                'unique_together': {('algorithm_name', 'date')},
            },
        ),
        migrations.CreateModel(
            name='UserRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algorithm_used', models.CharField(choices=[('content_based', 'Content-Based Filtering'), ('collaborative', 'Collaborative Filtering'), ('hybrid', 'Hybrid Approach'), ('category_based', 'Category-Based'), ('popularity', 'Popularity-Based')], max_length=20)),
                ('confidence_score', models.FloatField(default=0.0, help_text='Algorithm confidence score (0-1)')),
                ('is_viewed', models.BooleanField(default=False)),
                ('is_clicked', models.BooleanField(default=False)),
                ('is_donated', models.BooleanField(default=False)),
                ('recommendation_context', models.JSONField(blank=True, default=dict, help_text='Additional context like user location, time, etc.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('donated_at', models.DateTimeField(blank=True, null=True)),
                ('recommended_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='cases.charitycase')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_recommendations',
                'indexes': [models.Index(fields=['user', 'created_at'], name='user_recomm_user_id_c21cce_idx'), models.Index(fields=['algorithm_used'], name='user_recomm_algorit_ead323_idx'), models.Index(fields=['is_clicked'], name='user_recomm_is_clic_18dbe3_idx'), models.Index(fields=['is_donated'], name='user_recomm_is_dona_1f4a15_idx')],
                'unique_together': {('user', 'recommended_case', 'algorithm_used')},
            },
        ),
    ]
